<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>markdown cheet sheet</title>
    <url>/2021/02/22/markdown-cheet-sheet/</url>
    <content><![CDATA[<h2 id="Header-2"><a href="#Header-2" class="headerlink" title="Header 2"></a>Header 2</h2><h3 id="Header-3"><a href="#Header-3" class="headerlink" title="Header 3"></a>Header 3</h3><h4 id="Header-4"><a href="#Header-4" class="headerlink" title="Header 4"></a>Header 4</h4><h5 id="Header-5"><a href="#Header-5" class="headerlink" title="Header 5"></a>Header 5</h5><p><a href="#id-goes-here">Link back to H2</a></p>
<p>This is a paragraph, which is text surrounded by whitespace. Paragraphs can be on one<br>line (or many), and can drone on for hours.  </p>
<p>Here is a Markdown link to <a href="https://warpedvisions.org/">Warped</a>, and a literal <a href="http://link.com/">http://link.com/</a>.<br>Now some SimpleLinks, like one to [google] (automagically links to are-you-<br>feeling-lucky), a [wiki: test] link to a Wikipedia page, and a link to<br>[foldoc: CPU]s at foldoc.  </p>
<p>Now some inline markup like <em>italics</em>,  <strong>bold</strong>, and <code>code()</code>. Note that underscores in<br>words are ignored in Markdown Extra.</p>
<p><img src="/images/photo.jpeg" alt="picture alt" title="Title is optional"></p>
<blockquote>
<p>Blockquotes are like quoted text in email replies</p>
<blockquote>
<p>And, they can be nested</p>
</blockquote>
</blockquote>
<ul>
<li><p>Bullet lists are easy too</p>
</li>
<li><p>Another one</p>
</li>
<li><p>Another one</p>
</li>
</ul>
<ol>
<li>A numbered list<ol>
<li>aa<ol>
<li>aa-a</li>
</ol>
</li>
<li>bb<ol>
<li>bb-a</li>
</ol>
</li>
<li>cc<ol>
<li>cc-a</li>
</ol>
</li>
<li>dd</li>
</ol>
</li>
<li>Which is numbered</li>
<li>With periods and a space</li>
</ol>
<p>And now some code:  </p>
<p>Text with<br>two trailing spaces<br>(on the right)<br>can be used<br>for things like poems  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Code is just text indented a bit</span></span><br><span class="line">   which(is_easy) to_remember();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// Markdown extra adds un-indented code blocks too</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (this_is_more_code == <span class="literal">true</span> &amp;&amp; !indented) &#123;</span><br><span class="line">       <span class="comment">// tild wrapped code blocks, also not indented</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Horizontal-rules"><a href="#Horizontal-rules" class="headerlink" title="Horizontal rules"></a>Horizontal rules</h3><hr>
<h2 id="Markdown-plus-tables"><a href="#Markdown-plus-tables" class="headerlink" title="Markdown plus tables"></a>Markdown plus tables</h2><table>
<thead>
<tr>
<th>Header</th>
<th>Header</th>
<th align="right">Right</th>
</tr>
</thead>
<tbody><tr>
<td>Cell</td>
<td>Cell</td>
<td align="right">$10</td>
</tr>
<tr>
<td>Cell</td>
<td>Cell</td>
<td align="right">$20</td>
</tr>
</tbody></table>
<ul>
<li>Outer pipes on tables are optional<ul>
<li>1</li>
<li>2</li>
<li>3</li>
</ul>
</li>
<li>Colon used for alignment (right versus left)</li>
<li>Multiple definitions and terms are possible</li>
<li>Definitions can include multiple paragraphs too</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>王阳明心学</title>
    <url>/2021/02/22/%E7%8E%8B%E9%98%B3%E6%98%8E%E5%BF%83%E5%AD%A6/</url>
    <content><![CDATA[<p>王守仁,号阳明子,人们称他为王阳明.1472年出生在浙江余姚的一个书香门第. 出生时取名王云,到4岁不会说话.后得一和尚指点,其父改名为守仁.守仁,取自《论语》,“知及之,仁不能守之,虽得之,必失之.知及之,仁能守之”.  </p>
]]></content>
  </entry>
  <entry>
    <title>视频编解码相关</title>
    <url>/2021/02/20/%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<ol>
<li><p>PTS/DTS<br> 解码时经常看到DTS/PTS,其中 DTS: Decoding Time Stamp, PTS: Presentation Time Stamp<br> 在FFMPEG中有AVPacket和AVFrame两个类</p>
<ul>
<li><p>AVPacket 解码前/编码后的包, DTS是packet里的成员,表示该什么时候解码.</p>
</li>
<li><p>AVFrame 解码后/编码前的信号帧,表示视频的一帧图像, PTS是AVFrame成员, 决定何时呈现</p>
<p>为什么DTS与PTS不一定一致? 视频里的编码不一定是按显示顺序依次进行的, H264/HEVC编码标准里,出现B帧时,编码和输入顺序不一致.</p>
</li>
</ul>
</li>
<li><p>音频采样率</p>
<p> 模拟到数字化, 每秒抽取声波幅度样本次数.例如:音频1024 sample, 44.1k采样率, 1000*1024/44100 = 23.21ms<br> 可变帧率其采样间隔不等,需要用ms处理</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/01/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>NSObject alloc实现</title>
    <url>/2021/01/25/NSObject-Alloc%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>有两种alloc实现</p>
<ol>
<li><p>GNUstep(Cocoa互换框架 )</p>
<p> NSZone是为了防止内存碎片化而引入的结构,通过使用对象的目的,对象大小分配内存,提高效率.苹果官方文档说明, 现在的运行时系统内存管理已极具效率,使用NSZone反而效率低下源码复杂.</p>
<p> alloc简化版,引用计数信息写入对象内存头部</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">obj_layout</span>&#123;</span></span><br><span class="line">    NSUinteger retained;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">+(id)alloc&#123;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="keyword">sizeof</span>(stuct obj_layout)+对象大小</span><br><span class="line">    struct obj_layout *p = (struct obj_layout*) <span class="built_in">calloc</span>(<span class="number">1</span>,size);</span><br><span class="line">    <span class="keyword">return</span>(id)(p+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)release&#123;</span><br><span class="line">    <span class="keyword">if</span>(decrementeExtraRefCountWasZero(self))</span><br><span class="line">    [self dealloc];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)dealloc&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">obj_layout</span>*<span class="title">p</span> =</span> &amp; ((struct obj_layout *)self)[<span class="number">-1</span>];</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> Q:当retained变量超出最大值时会发生什么?<br> A:retain方法会抛出异常</p>
</li>
<li><p>Apple实现</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">CFSpinLock_t lock;</span><br><span class="line">CFBasicHashRef table;</span><br><span class="line"><span class="keyword">uint8_t</span> padding[<span class="number">64</span> - <span class="keyword">sizeof</span>(CFBasicHashRef) - <span class="keyword">sizeof</span>(CFSpinLock_t)];</span><br><span class="line"></span><br><span class="line">&#125; __NSRetainCounters[NUM_EXTERN_TABLES];</span><br><span class="line"></span><br><span class="line">CF_EXPORT <span class="keyword">uintptr_t</span> __CFDoExternRefOperation(<span class="keyword">uintptr_t</span> op, id obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nil == obj) HALT;</span><br><span class="line">    <span class="keyword">uintptr_t</span> idx = EXTERN_TABLE_IDX(obj);</span><br><span class="line">    <span class="keyword">uintptr_t</span> disguised = DISGUISE(obj);</span><br><span class="line">    CFSpinLock_t *lock = &amp;__NSRetainCounters[idx].lock;</span><br><span class="line">    CFBasicHashRef table = __NSRetainCounters[idx].table;</span><br><span class="line">    <span class="keyword">uintptr_t</span> count;</span><br><span class="line">    <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">300</span>:   <span class="comment">// increment</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">350</span>:   <span class="comment">// increment, no event</span></span><br><span class="line">            __CFSpinLock(lock);</span><br><span class="line">            CFBasicHashAddValue(table, disguised, disguised);</span><br><span class="line">            __CFSpinUnlock(lock);</span><br><span class="line">            <span class="keyword">if</span> (__CFOASafe &amp;&amp; op != <span class="number">350</span>) __CFRecordAllocationEvent(__kCFObjectRetainedEvent, obj, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">uintptr_t</span>)obj;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">400</span>:   <span class="comment">// decrement</span></span><br><span class="line">        <span class="keyword">if</span> (__CFOASafe) __CFRecordAllocationEvent(__kCFObjectReleasedEvent, obj, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">450</span>:   <span class="comment">// decrement, no event</span></span><br><span class="line">        __CFSpinLock(lock);</span><br><span class="line">        count = (<span class="keyword">uintptr_t</span>)CFBasicHashRemoveValue(table, disguised);</span><br><span class="line">        __CFSpinUnlock(lock);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> == count;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">        __CFSpinLock(lock);</span><br><span class="line">        count = (<span class="keyword">uintptr_t</span>)CFBasicHashGetCountOfKey(table, disguised);</span><br><span class="line">        __CFSpinUnlock(lock);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  __CFDoExternRefOperation 按照retainCount/retain/release 调用不同的函数.<br>  alloc通过多个散列表来管理引用计数,对每个引用计数表的访问都需要配合spinlock.<br> <code>CFBasicHashRef table = __NSRetainCounters[idx].table;</code> 从该行代码看,APPLE是通过多个散列表来管理引用计数,每个NSRetainCounters结构体里有spinlock和table,执行引用计数操作时是线程安全的.</p>
</li>
<li><p>两种实现对比</p>
<p> GNUstep实现简单高效,代码少, 内存块需考虑头部(指针地址偏移);<br> 苹果的实现较为复杂通过引用计数表查到内存块.<br> 苹果实现好处是:方便调试,即使对象内存块损坏, 只要引用计数表没有被破话, 就能够确认内存块位置; <strong><em>在检测内存泄漏时,有助于检测各对象的持有者是否存在.</em></strong></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
</search>
