<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>哈希碰撞冲突的解决</title>
    <url>/2021/07/20/%E5%93%88%E5%B8%8C%E7%A2%B0%E6%92%9E%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><p>将 key 转换为固定长度数组下标，存取&lt;key，value&gt;，当一个索引位置已经存取了某个值，后续通过计算又落到该索引位置时，产生存取冲突。常见解决冲突的方法有:</p>
<ol>
<li>开放地址: 产生冲突时，使用线性探测，向后移动 n 个位置。该方式缺点是容易引发元素聚集。</li>
<li>rehash  发生冲突时，使用第二个，第三个 hash 函数计算地址(比如取第 n 位)，直到无冲突</li>
<li>链表: 新加的数据更可能是”热数据”，所以将新增加的元素插入链表头部<br>装载因子:  a = 元素个数/hash数组大小，a 在 0.6～0.9 之间，一般取 0.75. 即当存取元素的数组接近装载满时，重新生成一个新的更大数组并将旧数据导入。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>MD5 与 SHA</title>
    <url>/2021/07/19/MD5%E4%B8%8ESHA/</url>
    <content><![CDATA[<h2 id="常用的哈希算法"><a href="#常用的哈希算法" class="headerlink" title="常用的哈希算法"></a>常用的哈希算法</h2><p>散列函数又称哈希函数，从任何一种数据中创建小的数字指纹的方法。哈希函数具有雪崩效应，即输入上微小的改变可以使输出产生剧变。</p>
<ul>
<li>MD5 信息摘要算法</li>
<li>SHA 安全哈希算法。 SHA256属于 SHA2 家族， 无论输入多长，都输出 64 个字符，共 32 byte，256bit(0-9，A～F，大小写敏感)。</li>
<li>SHA 比 MD5 摘要长，安全性更高；运行速度比 MD5 慢。</li>
</ul>
<h2 id="对称加密，非对称加密"><a href="#对称加密，非对称加密" class="headerlink" title="对称加密，非对称加密"></a>对称加密，非对称加密</h2><ul>
<li>其中非对称加密，有公私钥之分，公钥可以公开传播，私钥只有拥有者持有，不可对外暴露。 </li>
<li>通过私钥能还原出使用公钥加密过的内容，私钥也也可以用来签名，使用对应公钥解密。</li>
</ul>
<h2 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h2><ul>
<li>证书包含除公钥信息外， 还有一些额外身份信息，如商户号，公司名等。</li>
<li>公钥本身不包含持有者身份信息，所以需要 CA 证书认证机构，将公钥+拥有者信息+有效期等进行签名，制作成证书。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/05/12/%E8%8B%B9%E6%9E%9C%E5%B8%90%E5%8F%B7/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>AVFoundation播放器</title>
    <url>/2021/04/19/AVFoundation%E6%92%AD%E6%94%BE%E5%99%A8/</url>
    <content><![CDATA[<p>AVFoundation 包含了音视频播放，摄像头音视频流采集，媒体编辑等。</p>
<h2 id="音视频播放主要使用"><a href="#音视频播放主要使用" class="headerlink" title="音视频播放主要使用"></a>音视频播放主要使用</h2><ul>
<li>AVPlayer : 使用 playeritem 创建，KVO 监听播放状态变化</li>
<li>AVPlayerItem: 播控类 </li>
<li>AVPlayerLayer 与 player 绑定，视频渲染到该 layer 上</li>
<li>AVPlayerViewController 系统默认播放 UI套件</li>
<li>AVAudioPlayer 播放声音</li>
</ul>
<h2 id="摄像头音视频流采集"><a href="#摄像头音视频流采集" class="headerlink" title="摄像头音视频流采集"></a>摄像头音视频流采集</h2><p>使用流程</p>
<ol>
<li>创建 session:AVCaptureSession</li>
<li>创建 设备，AVCaptureDevice<ul>
<li>使用 第 2 步中胡 DEVICE创建 AVCaptureDeviceInput，并加入 session</li>
<li>创建AVCaptureOutput</li>
<li>设置 output 代理，加入 session ，在代理的串行线程队列中分析数据流<br>其他:</li>
</ul>
<ol>
<li>AVCaptureVideoPreviewLayer: 摄像头预览</li>
<li>AVAudioRecorder: 录制声音，暂停/恢复/停止录音</li>
</ol>
</li>
</ol>
<h2 id="媒体编辑"><a href="#媒体编辑" class="headerlink" title="媒体编辑"></a>媒体编辑</h2><ul>
<li>只读AVCompositon 由AVCompositionTrack 构成 (他们分别是 AVAsset 和 AVAssetTrack 子类)</li>
<li>媒体编辑AVMutableComposition+AVMutableCompositionTrack </li>
<li>访问视频帧和音频样本等更低层的数据: AVAssetReader/AVAssetWriter</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>HLS简谈</title>
    <url>/2021/04/19/HLS%E7%AE%80%E8%B0%88/</url>
    <content><![CDATA[<h2 id="HLS-HTTP-Live-Streaming-特点"><a href="#HLS-HTTP-Live-Streaming-特点" class="headerlink" title="HLS(HTTP Live Streaming)特点"></a>HLS(HTTP Live Streaming)特点</h2><p> HLS是苹果公司提出的基于HTTP的流媒体传输协议<a href="https://developer.apple.com/streaming/">https://developer.apple.com/streaming/</a>，其特点如下</p>
<ul>
<li>支持自适应码流，客户端可以根据自身的带宽情况及性能限制,播放不同码流视频. </li>
<li>支持 HTTPS 加密和用户认证</li>
<li>不需要特殊设备，可在 apache 等 web 服务器上分发<br>主要部分包含:<ol>
<li>m3u8索引文件: 定义片段文件的位置，时长(EXT-X-TARGETDURATION )，播放顺序等元数据</li>
<li>ts切片文件</li>
<li>key加密串(可选)</li>
</ol>
</li>
</ul>
<h2 id="面临的挑战"><a href="#面临的挑战" class="headerlink" title="面临的挑战"></a>面临的挑战</h2><ul>
<li>延迟<ul>
<li>解决方案：使用更短的 ts 段。 </li>
<li>副作用：更频繁的 HTTP 连接缓冲。</li>
</ul>
</li>
<li>会生成大量的小文件, 对存储IO造成了比较大的压力。<ul>
<li>解决方案:内存切片</li>
</ul>
</li>
</ul>
<h2 id="TS文件的三层结构"><a href="#TS文件的三层结构" class="headerlink" title="TS文件的三层结构:"></a>TS文件的三层结构:</h2><ul>
<li>es: 音视频数据</li>
<li>pes: 在es层上加时间戳</li>
<li>ts: 在pes层上增加数据流识别和传输信息，ts包大小一般为188字节</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>记一次排查bug所引发的对冥等设计的思考</title>
    <url>/2021/04/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%8E%92%E6%9F%A5bug%E6%89%80%E5%BC%95%E5%8F%91%E7%9A%84%E5%AF%B9%E5%86%A5%E7%AD%89%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>起因</p>
<blockquote>
<p>项目开发过程中，有位同事构建了一个支持折叠展开子项的cell（课程单元下有章节）。当使用tableview的代理方法创建cell时，只有每个cell设置不同ReuseIdentifier时，才能确保折叠与展开两种交互状态的正确性，这意味着cell没有实现内存复用，在数据量大的时候会产生内存暴涨问题。</p>
</blockquote>
<p>解决</p>
<blockquote>
<p>通过调试，发现tableview在对cell设置数据（setModel）后，未重置折叠展开的状态位S1。 setModel没有直接调用 -layoutsubview，但会通过setNeedsLayout被系统模板方法在某个合适时机间接调用到layoutsubview，而该方法会通过S1呈现展开或收起的状态。</p>
</blockquote>
<p>反思</p>
<blockquote>
<p>setModel作为暴露给外部使用的接口，要考虑幂等设计：即第一次调用跟第N次调用产生的效果是一样的。<br>要处理类似问题，开发人员除了清楚了解自己写的逻辑，也要清晰理解系统调用和运行机制。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>IOS数据加载层架构设计</title>
    <url>/2021/04/06/IOS%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E5%B1%82%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>之前工作中做过网络数据加载的设计工作.设计时考虑的一些关键点包含:</p>
<ul>
<li><p>网络请求的包装(AF)</p>
</li>
<li><p>数据解析(DataParser),需要对空值及错误处理</p>
</li>
<li><p>重试队列,对网络请求超时处理</p>
</li>
<li><p>对请求进行统一的加工</p>
<ul>
<li>根据域名,添加不同的公共参数,比如设备类型,OS版本,地理位置信息等. 调用方只关注业务所需参数.</li>
<li>根据请求参数进行请求签名</li>
</ul>
</li>
<li><p>日志</p>
<ul>
<li>了解使用方的调用情况,帮助定位错误,统计接口性能(比如排查响应时间过长的异常请求)等</li>
<li>考虑到出问题的更多是缓存层之前的部分(比如参数错误,流程错误等), 日志过多干扰问题定位,所以未对缓存层使用日志.</li>
</ul>
</li>
<li><p>缓存的读取及写入</p>
<ul>
<li>内存+硬盘 缓存方案可由调用方指定</li>
<li>内存使用NSCache或LRU淘汰算法. 最终使用的NSCache,原因:<ul>
<li>代码简单</li>
<li>自带线程安全</li>
<li>性能不是最好,但显然以单个普通APP的并发量查询操作,这里不会成为瓶颈点</li>
<li>内存警告时能自动清理内存数据</li>
</ul>
</li>
<li>持久化写入<ul>
<li>通过对url md5生成近乎唯一的key,作为cache key和文件名</li>
<li>写入temp目录,由系统自动清理</li>
<li>先对业务方返回数据,再进行写入,并使用队列 + 子线程,避免占用主线程</li>
</ul>
</li>
</ul>
<p>在设计缓存策略时, 没有使用URLCachePolicy的原因是,我们通过后端返回的数据字段来指定数据有效期,并且需要写入文件持久化存储. 另外需要提供给业务方更加定制化的数据回调策略.<br><strong>业务使用方只需关注本业务API特定的必要参数, 不用关注上述实现细节,调用非常简单</strong><br>伪代码:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">dataloader_a *loader = <span class="keyword">new</span> dataloader_a;</span><br><span class="line">loader.load_option = <span class="keyword">default</span>/net_only/cache_first...; <span class="comment">//设置数据加载策略</span></span><br><span class="line">loader.param1=<span class="string">&quot;&quot;</span>;</span><br><span class="line">loader.param2=<span class="string">&quot;&quot;</span>;</span><br><span class="line">loader.start_with_succ&#123;...&#125; fail&#123;...&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>附架构图设计如下:</p>
<p><img src="/2021/04/06/IOS%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E5%B1%82%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/1.png" alt="架构图"></p>
]]></content>
  </entry>
  <entry>
    <title>iTerm2快捷键</title>
    <url>/2021/02/23/iterm2-cursor/</url>
    <content><![CDATA[<p>修改 iterm2-&gt;Preferences-&gt;Profile.Default.Preset为<code>Natural Text Editing</code></p>
<ol>
<li><p>删除</p>
<blockquote>
<p>ctrl+u 光标前到行首字符<br> ctrl+k 光标到行尾字符<br> ctrl+w 光标前单词</p>
</blockquote>
</li>
<li><p>光标移动</p>
<blockquote>
<p>ctrl+a  行首<br> ctrl+e  行尾<br> option+ &lt;- word移动<br> option+ -&gt; word移动</p>
</blockquote>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>推荐好用的截图软件iShot</title>
    <url>/2021/02/22/ishot-md/</url>
    <content><![CDATA[<p>基本操作:</p>
<pre><code>1. option+ A 选取截图区域
2. 1-9功能,支持标注标 模糊等功能, 在标注内 滚动鼠标滑轮, 调整透明度; 在标注外,调整粗细
3. 空格(保存文件 到默认路径) or 回车到剪贴板
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>视频基本知识</title>
    <url>/2021/02/20/%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h2 id="视频编解码相关基础"><a href="#视频编解码相关基础" class="headerlink" title="视频编解码相关基础"></a>视频编解码相关基础</h2><ol>
<li><p>帧内压缩 将每帧当作一张图片，采用图片压缩算法。 I帧又称关键帧，包含一幅完整画面，解码时不依靠其他帧信息。</p>
</li>
<li><p>帧间压缩 计算当前帧和前后参考帧的向量差进行编码</p>
<ol>
<li>P帧，又称预测帧，记录了与前一帧画面的差别，需要用前一帧信息生成本帧的画面</li>
<li>B帧 使用前后帧（可以是P帧，I帧）去做更好的压缩</li>
</ol>
</li>
<li><p>GOP 画面组，多帧的集合，包含 I，P，B 帧</p>
</li>
<li><p>目前常用编码器及发展历史</p>
<ol>
<li>H.264/AVC 使用需支付专利许可费<br>开源实现：<br>   a.  思科openh264，只支持baseline profile，CPU占用低<br>   b.  x264仅作为编码器使用</li>
<li>H.265/HEVC 同等画质下比特率减少了50%，使用需要支付0.5%的内容收入。开源实现：x265，硬件厂商如高通 intel 苹果等支持较好</li>
<li>VP8, google发布libvpx， 开源实现libvpx，硬件支持有限</li>
<li>VP9，体积比VP8低50%，唯一开源实现libvpx 免费，硬件支持有限</li>
<li>AVS，我国有自主知识产权，AVS2.0 是同h265，vp9同级的新一代标准。</li>
<li>MPEG4 也是一种视频压缩格式，采用帧间压缩，仅存储连贯帧之间差别信息，所以其单个画面清晰度高。运动 画面连贯性方面264，265 更好，且具备更高压缩比适合网络传输</li>
</ol>
<p><img src="/2021/02/20/%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81%E7%9B%B8%E5%85%B3/%E7%BC%96%E8%A7%A3%E7%A0%81%E5%99%A8%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2.jpg" alt="avatar"></p>
</li>
<li><p>DTS/PTS</p>
<ul>
<li>DTS: Decoding Time Stamp,AVPacket 解码前/编码后的包, DTS是packet里的成员,表示该什么时候解码.</li>
<li>PTS: Presentation Time Stamp,AVFrame 解码后/编码前的信号帧,表示视频的一帧图像, PTS是AVFrame成员, 决定何时呈现</li>
<li>为什么DTS与PTS不一定一致? 视频里的编码不一定是按显示顺序依次进行的, H264/HEVC编码标准里,出现B帧时,编码和输入顺序不一致.</li>
</ul>
</li>
<li><p>码率: 每秒数据量</p>
</li>
<li><p>帧率: 每秒显示的图片数，由于视觉暂留，大于 16 看起来才连贯。</p>
</li>
<li><p>音频采样率<br> 模拟-&gt;数字化, 每秒抽取声波幅度样本次数.例如:音频1024 sample, 44.1k采样率, 1000*1024/44100 = 23.21ms<br> 可变帧率其采样间隔不等,需要用ms处理</p>
</li>
<li><p>视频内容保护的方法</p>
<ol>
<li>CDN令牌 与网站身份认证系统相似</li>
<li>拥有令牌系统，用户可以下载并分发视频，为避免此情况可以用DRM（实际是既不能防盗版又给正版用户加障碍）</li>
</ol>
</li>
<li><p>RTC(Real-Time Communications)<br>RTC包含采集，编码处理，传输，解码后处理，渲染的功能流程。<br>webRtc是Rtc的一部分，是google专门针对网页前端实时通信的开放框架，可以在 web 浏览器上通过 P2P 协议实现双向实时通信。RTC在直播连麦中采用UDP协议，延时低于几百毫秒。 普通直播采用TCP协议，使用CDN分发，延迟在几秒到十几秒。</p>
</li>
<li><p>视频的封装容器</p>
<ul>
<li>流式 TS，FLV</li>
<li>索引式 MP4 MOV AVI 等</li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>NSObject alloc实现</title>
    <url>/2021/01/25/NSObject-Alloc%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>有两种alloc实现</p>
<ol>
<li><p>GNUstep(Cocoa互换框架 )</p>
<p> NSZone是为了防止内存碎片化而引入的结构,通过使用对象的目的,对象大小分配内存,提高效率.苹果官方文档说明, 现在的运行时系统内存管理已极具效率,使用NSZone反而效率低下源码复杂.</p>
<p> alloc简化版,引用计数信息写入对象内存头部</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">obj_layout</span>&#123;</span></span><br><span class="line">    NSUinteger retained;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">+(id)alloc&#123;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="keyword">sizeof</span>(stuct obj_layout)+对象大小</span><br><span class="line">    struct obj_layout *p = (struct obj_layout*) <span class="built_in">calloc</span>(<span class="number">1</span>,size);</span><br><span class="line">    <span class="keyword">return</span>(id)(p+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)release&#123;</span><br><span class="line">    <span class="keyword">if</span>(decrementeExtraRefCountWasZero(self))</span><br><span class="line">    [self dealloc];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)dealloc&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">obj_layout</span>*<span class="title">p</span> =</span> &amp; ((struct obj_layout *)self)[<span class="number">-1</span>];</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> Q:当retained变量超出最大值时会发生什么?<br> A:retain方法会抛出异常</p>
</li>
<li><p>Apple实现</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">CFSpinLock_t lock;</span><br><span class="line">CFBasicHashRef table;</span><br><span class="line"><span class="keyword">uint8_t</span> padding[<span class="number">64</span> - <span class="keyword">sizeof</span>(CFBasicHashRef) - <span class="keyword">sizeof</span>(CFSpinLock_t)];</span><br><span class="line"></span><br><span class="line">&#125; __NSRetainCounters[NUM_EXTERN_TABLES];</span><br><span class="line"></span><br><span class="line">CF_EXPORT <span class="keyword">uintptr_t</span> __CFDoExternRefOperation(<span class="keyword">uintptr_t</span> op, id obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nil == obj) HALT;</span><br><span class="line">    <span class="keyword">uintptr_t</span> idx = EXTERN_TABLE_IDX(obj);</span><br><span class="line">    <span class="keyword">uintptr_t</span> disguised = DISGUISE(obj);</span><br><span class="line">    CFSpinLock_t *lock = &amp;__NSRetainCounters[idx].lock;</span><br><span class="line">    CFBasicHashRef table = __NSRetainCounters[idx].table;</span><br><span class="line">    <span class="keyword">uintptr_t</span> count;</span><br><span class="line">    <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">300</span>:   <span class="comment">// increment</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">350</span>:   <span class="comment">// increment, no event</span></span><br><span class="line">            __CFSpinLock(lock);</span><br><span class="line">            CFBasicHashAddValue(table, disguised, disguised);</span><br><span class="line">            __CFSpinUnlock(lock);</span><br><span class="line">            <span class="keyword">if</span> (__CFOASafe &amp;&amp; op != <span class="number">350</span>) __CFRecordAllocationEvent(__kCFObjectRetainedEvent, obj, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">uintptr_t</span>)obj;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">400</span>:   <span class="comment">// decrement</span></span><br><span class="line">        <span class="keyword">if</span> (__CFOASafe) __CFRecordAllocationEvent(__kCFObjectReleasedEvent, obj, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">450</span>:   <span class="comment">// decrement, no event</span></span><br><span class="line">        __CFSpinLock(lock);</span><br><span class="line">        count = (<span class="keyword">uintptr_t</span>)CFBasicHashRemoveValue(table, disguised);</span><br><span class="line">        __CFSpinUnlock(lock);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> == count;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">        __CFSpinLock(lock);</span><br><span class="line">        count = (<span class="keyword">uintptr_t</span>)CFBasicHashGetCountOfKey(table, disguised);</span><br><span class="line">        __CFSpinUnlock(lock);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>  __CFDoExternRefOperation 按照retainCount/retain/release 调用不同的函数.<br>  alloc通过多个散列表来管理引用计数,对每个引用计数表的访问都需要配合spinlock.<br> <code>CFBasicHashRef table = __NSRetainCounters[idx].table;</code> 从该行代码看,APPLE是通过多个散列表来管理引用计数,每个NSRetainCounters结构体里有spinlock和table,执行引用计数操作时是线程安全的.</p>
</li>
<li><p>两种实现对比</p>
<p> GNUstep实现简单高效,代码少, 内存块需考虑头部(指针地址偏移);<br> 苹果的实现较为复杂通过引用计数表查到内存块.<br> 苹果实现好处是:方便调试,即使对象内存块损坏, 只要引用计数表没有被破话, 就能够确认内存块位置; <strong><em>在检测内存泄漏时,有助于检测各对象的持有者是否存在.</em></strong></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>IOS</tag>
      </tags>
  </entry>
</search>
